"use strict";!function(){function e(){function e(e,t){function n(n){var o=$.makeArray(e.classList),a=n[0].oldValue,r=i||(a?a.split(" "):[]),c=o.filter(s,r),l=r.filter(s,o);t(c,l,o,r),i=o}function s(e){return this.indexOf(e)<0}var i,o=new MutationObserver(n);return o.observe(e,{attributes:!0,attributeOldValue:!0}),o.old=i,o}function t(t,n,s,i){function o(e,t){return t.every(function(t){return e.indexOf(t)>=0})}var a=n.split(" ");return s="function"==typeof s?s:function(){},i="function"==typeof i?i:function(){},new e(t,function(e,t,n,r){a.length>1?!o(r,a)&&o(n,a)?s():o(r,a)&&!o(n,a)&&i():o(e,a)?s():o(t,a)&&i()})}function n(e,t){var n,s,i=!1;return function(){return i?(n=arguments,void(s=this)):(i=!0,void setTimeout(function(){i=!1,e.apply(s,n),n=s=null},t))}}function s(){$(".b-main").innerHeight()<=$(window).innerHeight()?D.css("padding-right","").addClass("no-scroll"):D.css("padding-right",S).addClass("no-scroll")}function i(){D.removeClass("no-scroll").css("padding-right","")}function o(){var e=window.navigator.userAgent,t=e.indexOf("MSIE "),n=e.indexOf("Trident/");return t>0||n>0}function a(){o()?$("html").addClass("no-object-fit"):$("html").addClass("object-fit")}function r(){for(var e=document.querySelectorAll(".js-video"),t=0;t<e.length;t++)c(e[t])}function c(e){var t=e.querySelector(".js-video__link"),n=e.querySelector(".js-video__media"),s=(e.querySelector(".js-video__button"),l(n));e.addEventListener("click",function(){var t=d(s);$(".js-video").removeClass("js-video__link"),$(".js-video").removeClass("js-video__button"),e.appendChild(t)}),t.removeAttribute("href"),e.classList.add("b-video--enabled")}function l(e){var t=/https:\/\/i\.ytimg\.com\/vi\/([a-zA-Z0-9_-]+)\/maxresdefault\.jpg/i,n=e.src,s=n.match(t);return s[1]}function d(e){var t=document.createElement("iframe");return t.setAttribute("allowfullscreen",""),t.setAttribute("allow","autoplay"),t.setAttribute("src",u(e)),t.classList.add("b-video__media"),t}function u(e){var t="?rel=0&showinfo=0&autoplay=1";return"https://www.youtube.com/embed/"+e+t}function p(){Z.removeClass("is-open").delay(300).queue(function(e){$(this).hide(),e()}),I.removeClass("is-open"),i()}function f(){(J.hasClass("is-open")||U.hasClass("is-open"))&&(j(),w()),I.addClass("is-open"),Z.show().delay(10).queue(function(e){$(this).addClass("is-open"),e()}),s()}function h(e){var t=e.children().html();H.css("pointer-events","auto"),P.html(t).parent().removeClass("hidden")}function v(){P.html("").parent().addClass("hidden"),H.css("pointer-events","")}function m(e){N.hide(),N.attr("src",e).fadeIn()}function b(){(Z.hasClass("is-open")||U.hasClass("is-open"))&&(p(),w()),G.addClass("is-open"),J.show().delay(10).queue(function(e){$(this).addClass("is-open"),e()}),s()}function j(){J.removeClass("is-open").delay(300).queue(function(e){$(this).hide(),e()}),G.removeClass("is-open"),i()}function g(){var e=$(".js-promo-slider");e.slick({slidesToShow:1,slidesToScroll:1,arrows:!1,mobileFirst:!0,responsive:[{breakpoint:1023,settings:{slidesToShow:2}},{breakpoint:1439,settings:{slidesToShow:3}}]})}function C(){(Z.hasClass("is-open")||J.hasClass("is-open"))&&(p(),j()),Q.addClass("is-open"),U.show().delay(10).queue(function(e){$(this).addClass("is-open"),e()}),s()}function w(){U.removeClass("is-open").delay(300).queue(function(e){$(this).hide(),e()}),Q.removeClass("is-open"),i()}var k=.3,y=["bebe","beeb","ebeb","ebbe"],x=".js-on-visible",_="animated",A=x+"."+_,z=".js-is-visible",M="in-viewport",O="hold-outside-viewport";$(document).ready(function(){function e(e,t){function n(e){var t=e.getBoundingClientRect(),n=[["b",i],["b",o],["e",t.top],["e",t.bottom]].sort(function(e,t){return e[1]-t[1]}).map(function(e){return e[0]}).join("");return y.indexOf(n)>=0}var s=window.innerHeight,i=k*s,o=(1-k)*s;$(A).each(function(){!this.classList.contains(O)&&n(this)&&this.classList.remove(_)}),i=0,o=s,$(z).each(function(){this.classList.toggle(M,!this.classList.contains(O)&&n(this))})}var s=n(e,200),i=$(x+","+z);i.length&&($(window).off("scroll",s),$(".os-viewport").on("scroll",s),e(),i.each(function(){t(this,O,e,e)}))});var q=$("body"),D=$(".js-page-wrapper"),S=function(){var e=$("<div>").css({height:"50px",width:"50px"}),t=$("<div>").css({height:"200px"});q.append(e.append(t));var n=$("div",e).innerWidth();e.css("overflow-y","scroll");var s=$("div",e).innerWidth();return $(e).remove(),n-s};$(window).resize(function(){$(window).width()>=1366&&i()}),$(document).ready(function(){function e(){s.hasClass("open")&&(D.removeClass("no-scroll no-touch windows"),s.removeClass("open"),s.stop().fadeOut(300))}function t(e,t){var n=document,s=n.body,i=n.querySelector(t),o="client"+e;return e="scroll"+e,/CSS/.test(n.compatMode)?i[o]<i[e]:s[o]<s[e]}function n(){$(this).trigger("popup.open",[e]);var e=$(".b-popup[data-popup='"+$(this).attr("data-popup")+"']");e.length>0&&(o&&t("Height",".b-page-wrapper")&&D.addClass("windows"),s.removeClass("open"),s.fadeOut(300),D.addClass("no-scroll no-touch"),e.addClass("open"),e.css("display","flex").hide().fadeIn(300))}var s=$(".b-popup"),i=$(".b-popup__content"),o=navigator.userAgent.toLowerCase().indexOf("windows")!==-1;$(".js-open-popup").on("popup.onClose",function(t){e()}),$(document).on("click",".js-open-popup",function(){$(this).trigger("popup.onOpen")}),$(".js-open-popup").on("popup.onOpen",function(){n.call(this)}),$(document).on("click",".js-close-popup",function(){e(),$(".js-menu-in-popup-back").length&&$(".js-menu-in-popup-back").trigger("click")}),$(document).on("keydown",function(t){27===t.keyCode&&e()}),$(document).mouseup(function(t){s.hasClass("open")&&(i.is(t.target)||0!==i.has(t.target).length||e())})}),a();var T=window.navigator.userAgent;T.match(/Mac/i)&&(T.match(/iPad/i)||T.match(/iPhone/i)?$("html").addClass("ios"):$("html").addClass("mac")),r();var L=$(".js-header"),I=L.find(".js-burger"),Z=L.find(".js-menu");I.on("click",function(){Z.hasClass("is-open")?p():f()});var E=$(".js-constructor"),F=E.find(".js-constructor-link"),W=E.find(".js-constructor-back"),H=E.find(".js-backcrumbs"),P=H.find(".js-backcrumbs-item"),V=E.find(".js-size-box"),R=V.find(".js-size-button"),Y=V.find(".js-size-input-min").children("input"),B=V.find(".js-size-input-max").children("input"),N=$(".js-door-target");F.on("click",function(){E.addClass("is-expand"),h($(this)),$(this).siblings(".js-constructor-filter").show().delay(10).queue(function(e){$(this).addClass("is-expand"),e()})}),W.on("click",function(e){e.preventDefault(),v(),E.removeClass("is-expand").find(".js-constructor-filter.is-expand").removeClass("is-expand").delay(300).queue(function(e){$(this).hide(),e()})}),$(".js-radio-button").on("change",function(){var e=$(this),t=e.closest(".js-constructor-filter").siblings(".js-current-wrap"),n=t.find(".js-current-box"),s=e.siblings("label").children(".js-current-el").clone(),i=this.dataset.target;e.is(":checked")&&(m(i),n.html(""),s.appendTo(n),t.show(),j())}),$(".js-constructor-clear").on("click",function(){$(this).siblings(".js-current-box").html("").closest(".js-current-wrap").hide().siblings(".js-constructor-filter").find(".js-radio-button:checked").prop("checked",!1)}),Y.add(B).on("input",function(){Y.val()>0&&""!=Y.val()&&B.val()>0&&""!=B.val()?R.removeAttr("disabled"):R.attr("disabled","disabled")}),R.on("click",function(e){var t=$(this),n=t.closest(".js-constructor-filter"),s=n.siblings(".js-current-wrap"),i=s.find(".js-current-box"),o='<span class="b-radio-button__wrap js-current-el"><span class="b-radio-button__image"><span style="background: #7C7C7C;"><i class="b-icon icon-maximize"></i></span></span><span class="b-radio-button__text-label">'+Y.val()+" x "+B.val()+"</span></span>";e.preventDefault(),n.find(".js-radio-button:checked").prop("checked",!1),i.html(o),s.show(),j()}),$(".js-constructor-slider").each(function(){function e(e){var n=$("html").hasClass("no-object-fit")?t.find(".slick-active").data("slick-index")*-138:Number($(".js-constructor-slider .slick-track").css("transform").split(", ")[4]),s=e?$(".js-constructor-slider .slick-track").innerWidth()-18+n:$(".js-constructor-slider .slick-track").innerWidth()-18,i=$(".js-constructor-slider").parent().innerWidth();s<=i?t.parents(".b-constructor-slider__slider-wrap").addClass("visible"):t.parents(".b-constructor-slider__slider-wrap").removeClass("visible")}var t=$(this),n=t.parents(".b-constructor-slider__slider-wrap").find(".js-constructor-prev"),s=t.parents(".b-constructor-slider__slider-wrap").find(".js-constructor-next");t.on("init",e),t.slick({slidesToShow:1,slidesToScroll:1,dots:!1,focusOnSelect:!1,infinite:!1,mobileFirst:!0,arrows:!0,prevArrow:n,nextArrow:s,swipe:!1,accessibility:!1}).on("beforeChange",function(e,t,n,s){e.preventDefault();var i=$(".js-door-btn")[s].dataset.target;m(i)}).on("afterChange",function(){e(!0)}),$($(".js-door-target")[0]).show(),$(".js-door-btn").on("click",function(){var e=this.dataset.target;m(e)}),$(".js-color-radio-input").on("change",function(){var e=$(this).attr("id"),t=$(this).parent().parent().siblings();$(this).is(":checked")&&(t.find("label").removeClass("active"),t.find('label[for="'+e+'"]').addClass("active"))}),$(window).on("resize",e)}),$(document).ready(function(){objectFitImages(".js-image-wrapper")});var G=$(".js-aside-open"),J=$(".js-aside"),K=$(".js-close");G.on("click",function(){J.hasClass("is-open")?j():b()}),K.on("click",function(){j()}),$(".js-input").on("focusin",function(){$(this).siblings("label").hide(),$(this).closest(".js-input-wrapper").addClass("active")}),$(".js-input").on("focusout",function(){$(this).val().length>0||($(this).siblings("label").show(),$(this).closest(".js-input-wrapper").removeClass("active"))}),$(".js-minus").on("click",function(){var e=$(this).siblings(".js-input-count"),t=parseInt(e.val())-1;return t=t<1?0:t,e.val(t),e.on("change"),!1}),$(".js-plus").on("click",function(){var e=$(this).siblings(".js-input-count");return e.val(parseInt(e.val())+1),e.on("change"),!1}),$(".js-input-count").on("change",function(e){""==e.target.value&&(e.target.value=1)}),$(".js-edit").on("click",function(e){var t=$(".js-cart"),n=$(".js-card");e.preventDefault(),t.addClass("edit"),$(this).closest(n).addClass("is-edit")}),$(".js-button-edit").on("click",function(e){var t=$(".js-cart"),n=$(".js-card");e.preventDefault(),t.removeClass("edit"),n.removeClass("is-edit")}),$(".js-search").on("focusin",function(){$(this).addClass("active")}),$(".js-search").on("focusout",function(){$(this).removeClass("active")}),$(".js-promo-slider").length&&g(),$(document).ready(function(){var e={ignore:'.ignore, [type="hidden"]'};$.validator.setDefaults({debug:!0}),$.extend($.validator.messages,{required:"Это обязательное поле",email:"Неверный формат данных",tel:"Неверный формат данных",date:"Пожалуйста, введите корректную дату.",number:"Пожалуйста, введите число.",equalTo:"Пароли не совпадают"}),$.validator.addMethod("max-length",function(e,t,n){return e.length<=n},"Введите не более 140 символов"),$.validator.addMethod("js-tel-input",function(e,t){if(16==e.trim().length)return!0},"Пожалуйста, введите не менее 12 символов"),$.validator.addMethod("js-mask-tel",function(e,t,n){return e.indexOf("_")==-1},"Неверный формат данных"),$.validator.addMethod("js-valid-text",function(e,t){if(""!=e.trim())return!0},"Неверный формат данных"),$.validator.addMethod("js-regex",function(e,t){if(""!=e.trim())return this.optional(t)||/^[a-zA-Zа-яА-ЯЁё ]+$/.test(e)},"Только буквы"),$.validator.addMethod("js-valid-date",function(e,t){var n,s=new Date,i=s.getFullYear()+"-"+(s.getMonth()+1)+"-"+s.getDate(),o=e.split("."),a=new Date(o[2]+"/"+o[1]+"/"+o[0]);return n=o[2]==a.getFullYear()&&o[1]==a.getMonth()+1&&o[0]==a.getDate()&&Date.parse(i)<=Date.parse(a),this.optional(t)||n},"Некорректная дата");var t;$.validator.addMethod("js-remote-email",function(e,t){var n=!1;return $.ajax({url:$("[data-remote-email]").data("remote-email"),data:{value:e},async:!1,success:function(e){n=e}}),n},"E-mail уже занят"),$.validator.addMethod("js-remote-phone",function(e,t){var n=!1;return $.ajax({url:$(t).data("remote-phone"),data:{value:e},async:!1,success:function(e){n=e}}),n},"Телефон уже занят"),$.validator.addMethod("max-message",function(e,t){return this.optional(t)||/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]{6,}/i.test(e)},"Пароль должен содержать не менее 6 символов, в том числе цифры и буквы латинского алфавита"),$.validator.addMethod("js-remote-subscribe",function(e,t){var n=!1;return $.ajax({url:$(t).data("remote-subscribe"),data:{value:e},async:!1,success:function(e){n=e}}),n},"Данный E-mail уже участвует в рассылке"),$.validator.addMethod("filereqired",function(e,t,n){return"file"===$(t).attr("type")&&t.files&&t.files.length},"Файл не добавлен"),$.validator.addMethod("extension",function(e,t,n){if(n="string"==typeof n?n.replace(/,/g,"|"):"png|jpe?g|gif","file"===$(t).attr("type")&&t.files&&t.files.length)for(var s=0;s<t.files.length;s++)return this.optional(t)||t.files[s].name.match(new RegExp("\\.("+n+")$","i"));return!0},$.validator.format("")),$.validator.addMethod("maxsize",function(e,t,n){if(this.optional(t))return!0;if(n=1024*n,"file"===$(t).attr("type")&&t.files&&t.files.length)for(var s=0;s<t.files.length;s++)return t.files[s].size<=n;return!0},""),$.validator.addMethod("enter-email",function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)||/^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/.test(e)},"Неверный формат данных"),$("body").on("initValidation",function(){$(".js-form-validate").each(function(){var n=$(this),s={};n.hasClass("js-order-unregistered-form")&&(s={focusInvalid:!0,errorPlacement:function(e,t){e.insertAfter(t)}});var i=$.extend(s,e);n.data("error-selector")&&(i.errorLabelContainer=n.data("error-selector"));var o=n.validate(i),a=n.find("input.js-remote-subscribe, input.js-remote-user, input.js-remote-phone, input.js-remote-email");a.on("keydown",function(){var e=$(this);e.addClass("ignore")}).on("keyup",function(){clearTimeout(t);var e=this;t=setTimeout(function(){a.removeClass("ignore"),o.element(e)},1e3)}),n.hasClass("js-order-unregistered-form")&&setTimeout(function(){o=n.validate(i)},5e3),n.on("reset",function(e){o.resetForm()}),n.on("submit",function(e){if(o.numberOfInvalids()>0)e.stopImmediatePropagation();else{var t=n,s=t.attr("action")||location.href,i=t.attr("method"),e=t.data("event"),a=new FormData(n[0]);$.ajax({url:s,method:i,processData:!1,contentType:!1,data:a,success:function(){var e=$("div[data-popup~='success']");e.addClass("open"),n[0].reset()},error:function(){var e=$("div[data-popup~='error']");e.addClass("open"),n[0].reset()}})}}),n.find(".js-licence-accept").on("change",function(e){var t=n.find('button[type="submit"]');e.target.checked?t.removeClass("disabled"):t.addClass("disabled")}),n.find(".js-check-form").on("click",function(e){var t=$(this);o.numberOfInvalids()||(o.form(),n.valid(),setTimeout(function(){0==o.numberOfInvalids()&&t.trigger("popup.onOpen")},1e3))}),$(".js-simple-select").on("select2:select",function(){o.element(this)})})}),$("body").trigger("initValidation")});var Q=$(".js-authorization-open"),U=$(".js-authorization"),X=$(".js-close");Q.on("click",function(){U.hasClass("is-open")?w():C()}),X.on("click",function(){w()});var ee=$(".js-input-password"),te=$(".js-input-password").parent(),ne=$(".js-button-password"),se=$(".js-input-login"),ie=$(".js-button-login");ne.on("click",function(e){e.preventDefault(),te.hasClass("is-visible")?(ee.attr("type","password"),te.removeClass("is-visible")):(ee.attr("type","text"),te.addClass("is-visible"))}),ee.add(se).on("input",function(){ee.val().length>0&&se.val().length>0?ie.removeAttr("disabled"):ie.attr("disabled","disabled")})}document.addEventListener("DOMContentLoaded",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
