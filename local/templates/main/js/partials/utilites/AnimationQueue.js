"use strict";function AnimationQueue(t,n,i){function e(t){var n;return f++,c||"function"!=typeof s.animationstart||s.animationstart.call(s),c=c||t,t<=s.end&&!r?(requestAnimationFrame(e),void(f%i||(n=map(t,s.begin,s.end,0,1),s.list.filter(function(t){var i=t.start<=n&&n<=t.end;return t.start===t.end&&t.start<=n&&!u[t.id]?(u[t.id]=o,t.func.call(s,0,"once"),!1):i&&!u[t.id]?(u[t.id]=a,t.func.call(s,0,"first"),!1):(i||u[t.id]!==a||(u[t.id]=o,t.func.call(s,1,"last")),i)}).forEach(function(t){t.func.call(s,map(n,t.start,t.end,0,1))})))):(r=null,c=null,u=[],f=0,void("function"==typeof s.animationend&&s.animationend.call(s)))}var r,a="action",o="out;",c=(new RegExp("([.0-9]+)%","gi"),new RegExp("([.0-9]+)s","gi"),new RegExp("([.0-9]+)ms","gi"),null),u=[],s=this,f=0;if(i=i||1,isNaN(n))throw new TypeError("invalid arguments");Object.defineProperty(this,"begin",{get:function(){return c}}),Object.defineProperty(this,"end",{get:function(){return c?c+n:null}}),Object.defineProperty(this,"inAction",{get:function(){return Boolean(c)}}),this.start=function(){s.inAction||requestAnimationFrame(e)},this.stop=function(){s.inAction&&(r=!0)},this.list=Object.keys(t).map(function(i,e){var r=i.split("-");return r.forEach(function(t,i,e){var r=t.trim(),a=1;a=/([.0-9]+)%/.test(r)?.01:a,a=/([.0-9]+)s/.test(r)?1e3/n:a,a=/([.0-9]+)ms/.test(r)?1/n:a,e[i]=parseFloat(r)*a}),{id:e,start:isNaN(r[0])?-1:r[0],end:isNaN(r[1])?r[0]:r[1],func:"function"==typeof t[i]?t[i]:function(){}}})}function map(t,n,i,e,r){return(t-n)*(r-e)/(i-n)+e}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnRpYWxzL3V0aWxpdGVzL0FuaW1hdGlvblF1ZXVlLmpzIl0sIm5hbWVzIjpbIkFuaW1hdGlvblF1ZXVlIiwibGlzdCIsImR1cmF0aW9uIiwidGhyb3R0bGUiLCJzdGVwIiwidGltZXN0YW1wIiwicHJvZ3Jlc3MiLCJmcmFtZSIsInRpbWVTdGFydCIsInNlbGYiLCJhbmltYXRpb25zdGFydCIsImNhbGwiLCJlbmQiLCJzdG9wRmxhZyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1hcCIsImJlZ2luIiwiZmlsdGVyIiwiZSIsImluQWN0aW9uIiwic3RhcnQiLCJmaXJlZExpc3QiLCJpZCIsIk9VVCIsImZ1bmMiLCJJTl9BQ1RJT04iLCJmb3JFYWNoIiwiYW5pbWF0aW9uZW5kIiwiUmVnRXhwIiwidGhpcyIsImlzTmFOIiwiVHlwZUVycm9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJCb29sZWFuIiwic3RvcCIsImtleXMiLCJrZXkiLCJ0aW1pbmciLCJzcGxpdCIsImkiLCJhcnIiLCJzdHIiLCJ0cmltIiwidW5pdHMiLCJ0ZXN0IiwicGFyc2VGbG9hdCIsIngiLCJpbk1pbiIsImluTWF4Iiwib3V0TWluIiwib3V0TWF4Il0sIm1hcHBpbmdzIjoiQUFBQSxZQVdBLFNBQVNBLGdCQUFlQyxFQUFNQyxFQUFVQyxHQWlFdEMsUUFBU0MsR0FBS0MsR0FDWixHQUFJQyxFQVNKLE9BUkFDLEtBRUtDLEdBQTRDLGtCQUF4QkMsR0FBS0MsZ0JBQzVCRCxFQUFLQyxlQUFlQyxLQUFLRixHQUczQkQsRUFBWUEsR0FBYUgsRUFFckJBLEdBQWFJLEVBQUtHLE1BQVFDLEdBQzVCQyxzQkFBc0JWLFFBY3BCRyxFQUFRSixJQUlaRyxFQUFXUyxJQUFJVixFQUFXSSxFQUFLTyxNQUFPUCxFQUFLRyxJQUFLLEVBQUcsR0FDbkRILEVBQUtSLEtBQUtnQixPQUFPLFNBQVVDLEdBQ3pCLEdBQUlDLEdBQVdELEVBQUVFLE9BQVNkLEdBQVlBLEdBQVlZLEVBQUVOLEdBRXBELE9BQUlNLEdBQUVFLFFBQVVGLEVBQUVOLEtBQU9NLEVBQUVFLE9BQVNkLElBQWFlLEVBQVVILEVBQUVJLEtBQzNERCxFQUFVSCxFQUFFSSxJQUFNQyxFQUNsQkwsRUFBRU0sS0FBS2IsS0FBS0YsRUFBTSxFQUFHLFNBQ2QsR0FJTFUsSUFBYUUsRUFBVUgsRUFBRUksS0FDM0JELEVBQVVILEVBQUVJLElBQU1HLEVBQ2xCUCxFQUFFTSxLQUFLYixLQUFLRixFQUFNLEVBQUcsVUFDZCxJQUlKVSxHQUFZRSxFQUFVSCxFQUFFSSxNQUFRRyxJQUNuQ0osRUFBVUgsRUFBRUksSUFBTUMsRUFDbEJMLEVBQUVNLEtBQUtiLEtBQUtGLEVBQU0sRUFBRyxTQUdoQlUsS0FDTk8sUUFBUSxTQUFVUixHQUNuQkEsRUFBRU0sS0FBS2IsS0FBS0YsRUFBTU0sSUFBSVQsRUFBVVksRUFBRUUsTUFBT0YsRUFBRU4sSUFBSyxFQUFHLFVBekNuREMsRUFBVyxLQUNYTCxFQUFZLEtBQ1phLEtBQ0FkLEVBQVEsT0FFeUIsa0JBQXRCRSxHQUFLa0IsY0FDZGxCLEVBQUtrQixhQUFhaEIsS0FBS0YsS0FuRjdCLEdBUUlJLEdBUkFZLEVBQVksU0FDWkYsRUFBTSxPQUlOZixHQUhZLEdBQUlvQixRQUFPLGFBQWMsTUFDMUIsR0FBSUEsUUFBTyxhQUFjLE1BQ3BCLEdBQUlBLFFBQU8sY0FBZSxNQUM5QixNQUNaUCxLQUNBWixFQUFPb0IsS0FFUHRCLEVBQVEsQ0FHWixJQUZBSixFQUFXQSxHQUFZLEVBRW5CMkIsTUFBTTVCLEdBQ1IsS0FBTSxJQUFJNkIsV0FBVSxvQkFHdEJDLFFBQU9DLGVBQWVKLEtBQU0sU0FDMUJLLElBQUssV0FDSCxNQUFPMUIsTUFHWHdCLE9BQU9DLGVBQWVKLEtBQU0sT0FDMUJLLElBQUssV0FDSCxNQUFPMUIsR0FBWUEsRUFBWU4sRUFBVyxRQUc5QzhCLE9BQU9DLGVBQWVKLEtBQU0sWUFDMUJLLElBQUssV0FDSCxNQUFPQyxTQUFRM0IsTUFJbkJxQixLQUFLVCxNQUFRLFdBQ05YLEVBQUtVLFVBQ1JMLHNCQUFzQlYsSUFJMUJ5QixLQUFLTyxLQUFPLFdBQ04zQixFQUFLVSxXQUNQTixHQUFXLElBSWZnQixLQUFLNUIsS0FBTytCLE9BQU9LLEtBQUtwQyxHQUFNYyxJQUFJLFNBQVV1QixFQUFLaEIsR0FDL0MsR0FFSWlCLEdBQVNELEVBQUlFLE1BQU0sSUFTdkIsT0FSQUQsR0FBT2IsUUFBUSxTQUFVUixFQUFHdUIsRUFBR0MsR0FDN0IsR0FBSUMsR0FBTXpCLEVBQUUwQixPQUNSQyxFQUFRLENBQ1pBLEdBQVEsYUFBYUMsS0FBS0gsR0FBTyxJQUFPRSxFQUN4Q0EsRUFBUSxhQUFhQyxLQUFLSCxHQUFPLElBQU96QyxFQUFXMkMsRUFDbkRBLEVBQVEsY0FBY0MsS0FBS0gsR0FBTyxFQUFJekMsRUFBVzJDLEVBQ2pESCxFQUFJRCxHQUFLTSxXQUFXSixHQUFPRSxLQUczQnZCLEdBQUlBLEVBQ0pGLE1BQU9VLE1BQU1TLEVBQU8sT0FBV0EsRUFBTyxHQUN0QzNCLElBQUtrQixNQUFNUyxFQUFPLElBQU1BLEVBQU8sR0FBS0EsRUFBTyxHQUMzQ2YsS0FBMkIsa0JBQWR2QixHQUFLcUMsR0FBc0JyQyxFQUFLcUMsR0FBTyxnQkErRDFELFFBQVN2QixLQUFJaUMsRUFBR0MsRUFBT0MsRUFBT0MsRUFBUUMsR0FDcEMsT0FBUUosRUFBSUMsSUFBVUcsRUFBU0QsSUFBV0QsRUFBUUQsR0FBU0UiLCJmaWxlIjoicGFydGlhbHMvdXRpbGl0ZXMvQW5pbWF0aW9uUXVldWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbntcbiAgICAnMTAlIC0gMjAlJzogZnVuY3Rpb24ocHJvZ3Jlc3MpIHt9LFxuICAgICc1MCUnOiBmdW5jdGlvbihwcm9ncmVzcykge30sXG59XG5cbmFuaW1hdGlvbnN0YXJ0XG5hbmltYXRpb25lbmRcbiovXG5mdW5jdGlvbiBBbmltYXRpb25RdWV1ZShsaXN0LCBkdXJhdGlvbiwgdGhyb3R0bGUpIHtcbiAgdmFyIElOX0FDVElPTiA9ICdhY3Rpb24nO1xuICB2YXIgT1VUID0gJ291dDsnO1xuICB2YXIgcGVyY2VudFJlID0gbmV3IFJlZ0V4cCgnKFsuMC05XSspJScsICdnaScpO1xuICB2YXIgc2Vjb25kUmUgPSBuZXcgUmVnRXhwKCcoWy4wLTldKylzJywgJ2dpJyk7XG4gIHZhciBtaWxsaXNlY29uZFJlID0gbmV3IFJlZ0V4cCgnKFsuMC05XSspbXMnLCAnZ2knKTtcbiAgdmFyIHRpbWVTdGFydCA9IG51bGw7XG4gIHZhciBmaXJlZExpc3QgPSBbXTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc3RvcEZsYWc7XG4gIHZhciBmcmFtZSA9IDA7XG4gIHRocm90dGxlID0gdGhyb3R0bGUgfHwgMTtcblxuICBpZiAoaXNOYU4oZHVyYXRpb24pKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBhcmd1bWVudHMnKTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYmVnaW4nLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGltZVN0YXJ0O1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZW5kJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRpbWVTdGFydCA/IHRpbWVTdGFydCArIGR1cmF0aW9uIDogbnVsbDtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2luQWN0aW9uJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4odGltZVN0YXJ0KTtcbiAgICB9XG4gIH0pO1xuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzZWxmLmluQWN0aW9uKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2VsZi5pbkFjdGlvbikge1xuICAgICAgc3RvcEZsYWcgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmxpc3QgPSBPYmplY3Qua2V5cyhsaXN0KS5tYXAoZnVuY3Rpb24gKGtleSwgaWQpIHtcbiAgICB2YXIgc3RhcnQ7XG4gICAgdmFyIGVuZDtcbiAgICB2YXIgdGltaW5nID0ga2V5LnNwbGl0KCctJyk7XG4gICAgdGltaW5nLmZvckVhY2goZnVuY3Rpb24gKGUsIGksIGFycikge1xuICAgICAgdmFyIHN0ciA9IGUudHJpbSgpO1xuICAgICAgdmFyIHVuaXRzID0gMTtcbiAgICAgIHVuaXRzID0gLyhbLjAtOV0rKSUvLnRlc3Qoc3RyKSA/IDAuMDEgOiB1bml0cztcbiAgICAgIHVuaXRzID0gLyhbLjAtOV0rKXMvLnRlc3Qoc3RyKSA/IDEwMDAgLyBkdXJhdGlvbiA6IHVuaXRzO1xuICAgICAgdW5pdHMgPSAvKFsuMC05XSspbXMvLnRlc3Qoc3RyKSA/IDEgLyBkdXJhdGlvbiA6IHVuaXRzO1xuICAgICAgYXJyW2ldID0gcGFyc2VGbG9hdChzdHIpICogdW5pdHM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHN0YXJ0OiBpc05hTih0aW1pbmdbMF0pID8gLTEgOiB0aW1pbmdbMF0sXG4gICAgICBlbmQ6IGlzTmFOKHRpbWluZ1sxXSkgPyB0aW1pbmdbMF0gOiB0aW1pbmdbMV0sXG4gICAgICBmdW5jOiB0eXBlb2YgbGlzdFtrZXldID09PSAnZnVuY3Rpb24nID8gbGlzdFtrZXldIDogZnVuY3Rpb24gKCkge31cbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBzdGVwKHRpbWVzdGFtcCkge1xuICAgIHZhciBwcm9ncmVzcztcbiAgICBmcmFtZSsrO1xuXG4gICAgaWYgKCF0aW1lU3RhcnQgJiYgdHlwZW9mIHNlbGYuYW5pbWF0aW9uc3RhcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNlbGYuYW5pbWF0aW9uc3RhcnQuY2FsbChzZWxmKTtcbiAgICB9XG5cbiAgICB0aW1lU3RhcnQgPSB0aW1lU3RhcnQgfHwgdGltZXN0YW1wO1xuXG4gICAgaWYgKHRpbWVzdGFtcCA8PSBzZWxmLmVuZCAmJiAhc3RvcEZsYWcpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RvcEZsYWcgPSBudWxsO1xuICAgICAgdGltZVN0YXJ0ID0gbnVsbDtcbiAgICAgIGZpcmVkTGlzdCA9IFtdO1xuICAgICAgZnJhbWUgPSAwO1xuXG4gICAgICBpZiAodHlwZW9mIHNlbGYuYW5pbWF0aW9uZW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNlbGYuYW5pbWF0aW9uZW5kLmNhbGwoc2VsZik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZnJhbWUgJSB0aHJvdHRsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHByb2dyZXNzID0gbWFwKHRpbWVzdGFtcCwgc2VsZi5iZWdpbiwgc2VsZi5lbmQsIDAsIDEpO1xuICAgIHNlbGYubGlzdC5maWx0ZXIoZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBpbkFjdGlvbiA9IGUuc3RhcnQgPD0gcHJvZ3Jlc3MgJiYgcHJvZ3Jlc3MgPD0gZS5lbmQ7IC8vINC+0LTQuNC90L7Rh9C90YvQuSDQstGL0LfQvtCyXG5cbiAgICAgIGlmIChlLnN0YXJ0ID09PSBlLmVuZCAmJiBlLnN0YXJ0IDw9IHByb2dyZXNzICYmICFmaXJlZExpc3RbZS5pZF0pIHtcbiAgICAgICAgZmlyZWRMaXN0W2UuaWRdID0gT1VUO1xuICAgICAgICBlLmZ1bmMuY2FsbChzZWxmLCAwLCAnb25jZScpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IC8vINC/0LXRgNCy0YvQuSDQstGL0LfQvtCyXG5cblxuICAgICAgaWYgKGluQWN0aW9uICYmICFmaXJlZExpc3RbZS5pZF0pIHtcbiAgICAgICAgZmlyZWRMaXN0W2UuaWRdID0gSU5fQUNUSU9OO1xuICAgICAgICBlLmZ1bmMuY2FsbChzZWxmLCAwLCAnZmlyc3QnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSAvLyDQv9C+0YHQu9C10LTQvdC40Lkg0LLRi9C30L7QslxuXG5cbiAgICAgIGlmICghaW5BY3Rpb24gJiYgZmlyZWRMaXN0W2UuaWRdID09PSBJTl9BQ1RJT04pIHtcbiAgICAgICAgZmlyZWRMaXN0W2UuaWRdID0gT1VUO1xuICAgICAgICBlLmZ1bmMuY2FsbChzZWxmLCAxLCAnbGFzdCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5BY3Rpb247XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xuICAgICAgZS5mdW5jLmNhbGwoc2VsZiwgbWFwKHByb2dyZXNzLCBlLnN0YXJ0LCBlLmVuZCwgMCwgMSkpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcCh4LCBpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4KSB7XG4gIHJldHVybiAoeCAtIGluTWluKSAqIChvdXRNYXggLSBvdXRNaW4pIC8gKGluTWF4IC0gaW5NaW4pICsgb3V0TWluO1xufSJdfQ==
